{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","findById","stub","withArgs","returns","Promise","resolve","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual","byId"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,YAAW,CAAE;AADF,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN;AADI,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AAC1BD,YAAUd,MAAMc,OAAN,CAAcE,MAAd,EAAV;;AAEAJ,cAAY;AACVK,aAASH,QAAQP,GAAR;AADC,GAAZ;;AAIAK,YAAUM,QAAV,GAAqBJ,QAAQK,IAAR,EAArB;AACAP,YAAUM,QAAV,CAAmBE,QAAnB,CAA4BT,EAA5B,EAAgCU,OAAhC,CAAwCC,QAAQC,OAAR,CAAgBrB,cAAcgB,QAAd,CAAuBP,EAAvB,CAAhB,CAAxC;AACA,QAAMa,gBAAgBvB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMW,SADc;AAEtC,uBAAmB,MAAMP;AAFa,GAAlB,CAAtB;;AAKAQ,OAAK,MAAMW,cAAcrB,MAAd,CAAX;AACD,CAfD;;AAiBAL,KAAK2B,SAAL,CAAe,MAAM;AACnBX,aAAWd,MAAMc,OAAN,CAAcY,OAAd,EAAX;AACD,CAFD;;AAIA5B,KAAK,OAAL,EAAc6B,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIA/B,KAAKgC,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUd,OAAV,wBAAkBe,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUd,OAAV,+BAAkBgB,UAAlB,aAA6B5B,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,oCAAjD;AACAsB,IAAEI,IAAF,yBAAO,iEAAWzB,SAAX,wBAAqB0B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWzB,SAAX,+BAAqB2B,UAArB,aAAgCrB,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,mCAAnD;AACD,CALD;;AAOAd,KAAKgC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,QAAQ,MAAMrB,GAAGgB,KAAH,CAASX,QAAT,CAAkBP,EAAlB,CAAlB;;AAEAgB,IAAEQ,SAAF,CAAYD,KAAZ,EAAmBhC,cAAckC,IAAd,CAAmBzB,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CAJD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})"]}