{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDataBase","afterEach","t","restore","truthy","Agent","serial","true","called","calledWith"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACTC,aAAS,YAAU,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACbC,eAAWL,MAAMM,GAAN;AADE,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAS;AACrBD,cAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;AACAJ,gBAAY;AACRK,iBAASH,QAAQH,GAAR;AADD,KAAZ;AAGA,UAAMO,gBAAgBZ,WAAY,KAAZ,EAAmB;AACrC,0BAAkB,MAAMM,SADa;AAErC,2BAAmB,MAAMH;AAFY,KAAnB,CAAtB;AAIAI,SAAK,MAAMK,cAAcX,MAAd,CAAX;AACH,CAVD;;AAYAJ,KAAKgB,SAAL,CAAeC,KAAK;AAChBN,eAAWT,MAAMS,OAAN,CAAcO,OAAd,EAAX;AACH,CAFD;;AAIAlB,KAAK,OAAL,EAAciB,KAAI;AAAA;;AACdA,MAAEE,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBJ,KAAG;AAAA;AAAA;AAAA;AAAA;;AACpBA,MAAEK,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,oBAAjC;AACAN,MAAEK,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BlB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,oBAAjD;AACAW,MAAEK,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,sBAApC;AACAN,MAAEK,IAAF,yBAAO,wEAAWf,SAAX,+BAAqBiB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,qBAAnD;AAEH,CAND","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet config = {\n    logging: function(){}\n}\n\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async()=>{\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    const setupDataBase = proxyquire ('../', {\n        './models/agent': () => AgentStub, \n        './models/metric': () => MetricStub\n    })\n    db = await setupDataBase(config)\n})\n\ntest.afterEach(t => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t =>{\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t=>{\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument AgentStub')\n    t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument MetricStub')\n\n})"]}